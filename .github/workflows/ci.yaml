name: CI & Release (GHCR, Trivy-gated)

on:
  pull_request:
  push:
    branches: [ main ]
    tags: ['v*.*.*']       # e.g., v0.1.0
  workflow_dispatch: {}

# IMPORTANT: allow the workflow token to publish to GHCR
permissions:
  contents: read
  packages: write

jobs:
  go-ci:
    name: Go build/test/vet + tidy gate
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.x'

      - name: Go module cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: gomod-${{ runner.os }}-${{ hashFiles('**/go.sum') }}

      - name: Tidy (verify no drift)
        run: |
          go mod tidy
          git diff --exit-code go.mod go.sum

      - name: Build (read-only modules)
        run: go build -mod=readonly ./...

      - name: Vet
        run: go vet ./...

      - name: Test (quick)
        run: go test -mod=readonly ./...

  release:
    name: Build → Trivy gate → Publish to GHCR
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    needs: go-ci
    env:
      # Push to the SAME owner namespace as the repo (avoids permission issues)
      IMAGE: ghcr.io/${{ github.repository_owner }}/oke-ingress-operator
      TAG: ${{ github.ref_name }}
      GATE_TAG: gate-${{ github.sha }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}   # push as repo owner namespace
          password: ${{ secrets.GITHUB_TOKEN }}      # has packages:write from top-level permissions

      - name: Extract metadata (tags/labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE }}
          tags: |
            type=raw,value=${{ env.GATE_TAG }}   # temporary gate tag only
          labels: |
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}

      # ---- Build & push a temporary "gate" image (multi-arch) ----
      - name: Build & Push (temp gate tag)
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # ---- Trivy gate: fail on HIGH/CRITICAL ----
      - name: Cache Trivy DB
        uses: actions/cache@v4
        with:
          path: ~/.cache/trivy
          key: trivy-db-${{ runner.os }}-v1

      - name: Trivy scan (gate)
        uses: aquasecurity/trivy-action@0.22.0
        with:
          image-ref: ${{ env.IMAGE }}:${{ env.GATE_TAG }}
          format: table
          exit-code: '1'                # gate: fail on findings
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

      # ---- Promote the clean image to <tag> and latest (no rebuild) ----
      - name: Promote to release tag and latest
        run: |
          docker buildx imagetools create \
            -t "${IMAGE}:${TAG}" \
            -t "${IMAGE}:latest" \
            "${IMAGE}:${GATE_TAG}"

      # Optional: sanity pull to verify tags exist
      - name: Pull sanity
        run: |
          docker pull ${IMAGE}:${TAG}
          docker pull ${IMAGE}:latest